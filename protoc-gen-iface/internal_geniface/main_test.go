package internal_geniface

import (
	"log"
	"testing"

	"github.com/josudoey/pbconv"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/known/structpb"
	"google.golang.org/protobuf/types/pluginpb"
)

func TestGenerateFile(t *testing.T) {
	fileProtoPath := structpb.File_google_protobuf_struct_proto.Path()
	fileProto, _ := pbconv.GetFileDescriptorProtoByFilename(fileProtoPath)

	genOptions := protogen.Options{}
	gen, err := genOptions.New(&pluginpb.CodeGeneratorRequest{
		Parameter:      proto.String(""),
		FileToGenerate: []string{fileProtoPath},
		ProtoFile: []*descriptorpb.FileDescriptorProto{
			fileProto,
		},
	})

	if err != nil {
		t.Fatalf("new gen request got err: %+v", err)
	}

	for _, f := range gen.Files {
		if f.Generate {
			GenerateFile(gen, f)
		}
	}

	res := gen.Response()
	if want := 1; len(res.File) != want {
		log.Fatalf("response file length got: %q want: %q", len(res.File), want)
	}

	if want := "google.golang.org/protobuf/types/known/structpb/struct.iface.go"; want != res.File[0].GetName() {
		t.Errorf("response file name got: %q want: %q", res.File[0].GetName(), want)
	}

	if want := `// Code generated by protoc-gen-iface. DO NOT EDIT.
package structpb

type StructIface interface {
	GetFields() map[string]*Value
}

type ValueIface interface {
	GetKind() isValue_Kind
	GetNullValue() NullValue
	GetNumberValue() float64
	GetStringValue() string
	GetBoolValue() bool
	GetStructValue() *Struct
	GetListValue() *ListValue
}

type ListValueIface interface {
	GetValues() []*Value
}
`; want != res.File[0].GetContent() {
		t.Errorf("response file content got: %q want: %q", res.File[0].GetContent(), want)
	}
}
