package pbconv

import (
	"github.com/josudoey/go-pbconv/internal/fixture"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"google.golang.org/protobuf/types/descriptorpb"
)

var _ = Describe("GetFileDescriptorProtoByRaw", func() {
	var (
		rawDesc []byte

		file *descriptorpb.FileDescriptorProto
		err  error
	)

	BeforeEach(func() {
		// ref https://github.com/golang/protobuf/blob/5d5e8c018a13017f9d5b8bf4fad64aaa42a87308/ptypes/empty/empty.pb.go#L19C1-L19C1
		// empty_proto_rawDesc
		rawDesc = []byte{
			0x0a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c,
			0x61, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x74, 0x79,
			0x70, 0x65, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
			0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
			0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
			0x74, 0x6f, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
			0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
			0x2f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x3b, 0x65, 0x6d,
			0x70, 0x74, 0x79, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
		}
	})

	JustBeforeEach(func() {
		file, err = GetFileDescriptorProtoByRaw(rawDesc)
	})

	It("success", func() {
		Expect(err).To(Succeed())
		Expect(file).ToNot(BeNil())
		Expect(file.GetName()).To(Equal("github.com/golang/protobuf/ptypes/empty/empty.proto"))
		Expect(file.GetOptions().GetGoPackage()).To(Equal("github.com/golang/protobuf/ptypes/empty;empty"))
	})
})

var _ = Describe("GetFileDescriptorProtoByFilename", func() {
	var (
		_ = fixture.File_internal_fixture_file_proto

		filename string

		file *descriptorpb.FileDescriptorProto
		err  error
	)

	BeforeEach(func() {
		filename = "internal/fixture/file.proto"
	})

	JustBeforeEach(func() {
		file, err = GetFileDescriptorProtoByFilename(filename)
	})

	It("success", func() {
		Expect(err).To(Succeed())
		Expect(file).ToNot(BeNil())

		Expect(file.GetPackage()).To(Equal("pbconv.intenal.fixture"))
		Expect(file.GetOptions().GetGoPackage()).To(Equal("github.com/josudoey/go-pbconv/internal/fixture"))
	})
})
