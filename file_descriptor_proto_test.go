package pbconv

import (
	"bytes"
	"testing"

	goproto "github.com/golang/protobuf/proto"
	"github.com/josudoey/go-pbconv/internal/fixture"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/known/emptypb"
)

func TestGetFileDescriptorProtoByRaw(t *testing.T) {
	var (
		rawDesc []byte

		file *descriptorpb.FileDescriptorProto
		err  error
	)

	// ref https://github.com/golang/protobuf/blob/5d5e8c018a13017f9d5b8bf4fad64aaa42a87308/ptypes/empty/empty.pb.go#L19C1-L19C1
	// empty_proto_rawDesc
	rawDesc = []byte{
		0x0a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c,
		0x61, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x74, 0x79,
		0x70, 0x65, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
		0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
		0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
		0x74, 0x6f, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
		0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
		0x2f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x3b, 0x65, 0x6d,
		0x70, 0x74, 0x79, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
	}

	file, err = GetFileDescriptorProtoByRaw(rawDesc)
	if err != nil {
		t.Fatalf("GetFileDescriptorProtoByRaw(rawDesc): got %+v", err)
	}

	if want := "github.com/golang/protobuf/ptypes/empty/empty.proto"; file.GetName() != want {
		t.Errorf("file name got %q\nwant %q", file.GetName(), want)
	}

	if want := ""; file.GetPackage() != want {
		t.Errorf("file package got %q\nwant %q", file.GetPackage(), want)
	}

	if want := "github.com/golang/protobuf/ptypes/empty;empty"; file.GetOptions().GetGoPackage() != want {
		t.Errorf("go package option got %q\nwant %q", file.GetOptions().GetGoPackage(), want)
	}
}

func TestGetFileDescriptorProtoByFilename(t *testing.T) {
	var (
		_ = fixture.File_internal_fixture_file_proto

		filename string

		file *descriptorpb.FileDescriptorProto
		err  error
	)

	filename = "internal/fixture/file.proto"

	file, err = GetFileDescriptorProtoByFilename(filename)
	if err != nil {
		t.Fatalf("GetFileDescriptorProtoByFilename(%q): got %+v", filename, err)
	}

	if want := "internal/fixture/file.proto"; file.GetName() != want {
		t.Errorf("file name got %q\nwant %q", file.GetName(), want)
	}

	if want := "pbconv.intenal.fixture"; file.GetPackage() != want {
		t.Errorf("file package got %q\nwant %q", file.GetPackage(), want)
	}

	if want := "github.com/josudoey/go-pbconv/internal/fixture"; file.GetOptions().GetGoPackage() != want {
		t.Errorf("go package option got %q\nwant %q", file.GetOptions().GetGoPackage(), want)
	}
}

func TestGetFileDescriptorProtoByMessage(t *testing.T) {
	var (
		message goproto.Message

		file *descriptorpb.FileDescriptorProto
		err  error
	)

	message = (*emptypb.Empty)(nil)

	file, err = GetFileDescriptorProtoByMessage(message)
	if err != nil {
		t.Fatalf("GetFileDescriptorProtoByMessage(%q): got %+v", message, err)
	}

	if want := "google/protobuf/empty.proto"; file.GetName() != want {
		t.Errorf("file name got %q\nwant %q", file.GetName(), want)
	}

	if want := "google.protobuf"; file.GetPackage() != want {
		t.Errorf("file package got %q\nwant %q", file.GetPackage(), want)
	}

	if want := "google.golang.org/protobuf/types/known/emptypb"; file.GetOptions().GetGoPackage() != want {
		t.Errorf("go package option got %q\nwant %q", file.GetOptions().GetGoPackage(), want)
	}

	// ref https://github.com/protocolbuffers/protobuf-go/blob/6d0a5dbd95005b70501b4cc2c5124dab07a1f4a0/types/known/emptypb/empty.pb.go#L90C1-L90C1
	rawDesc, _ := goproto.Marshal(file)
	if want := []byte{
		0x0a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
		0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67,
		0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x07,
		0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x7d, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
		0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x0a,
		0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x6f,
		0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
		0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6b,
		0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x70, 0x62, 0xf8, 0x01, 0x01, 0xa2,
		0x02, 0x03, 0x47, 0x50, 0x42, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x50,
		0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77,
		0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
	}; !bytes.Equal(rawDesc, want) {
		t.Fatalf("descRaw got %q\nwant %q", rawDesc, want)
	}
}
